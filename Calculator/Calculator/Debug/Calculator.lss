
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008c  0080008c  00000c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000861  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041a  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000213  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000376  00000000  00000000  00002133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000024a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <string.h>
#include "LCD_16x2.h"				/*include LCD16x2 library*/
#include "Keypad_4x4.h"				/*include keypad library*/

int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a9 97       	sbiw	r28, 0x29	; 41
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char number1[12],number2[12],i,key,answer[12],fun,no1flag;		/*no1, no2, answer arrays index=i*/
	long no1,no2,ans;												/*no1 fun no2 = ans */
	
	lcd_init();
  a6:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_init>
	lcd_string("calculator");
  aa:	80 e7       	ldi	r24, 0x70	; 112
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	84 e3       	ldi	r24, 0x34	; 52
  b6:	9c e0       	ldi	r25, 0x0C	; 12
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x30>
  c2:	00 00       	nop
	_delay_ms(500);
	clear_LCD();
  c4:	0e 94 34 02 	call	0x468	; 0x468 <clear_LCD>
	
	i=0;									 /*counter*/
	no1flag=1;								/*no1flag to indicate 1st number no1.*/
  c8:	a1 e0       	ldi	r26, 0x01	; 1
  ca:	a8 a7       	std	Y+40, r26	; 0x28
	lcd_init();
	lcd_string("calculator");
	_delay_ms(500);
	clear_LCD();
	
	i=0;									 /*counter*/
  cc:	31 2c       	mov	r3, r1
							break;
						}
						break;
			
			case 'c':												/*clear function, clear all values*/
						memset(number1,0,12);						/*reset array to zero*/
  ce:	0f 2e       	mov	r0, r31
  d0:	fc e0       	ldi	r31, 0x0C	; 12
  d2:	2f 2e       	mov	r2, r31
  d4:	f0 2d       	mov	r31, r0
  d6:	fe 01       	movw	r30, r28
  d8:	31 96       	adiw	r30, 0x01	; 1
  da:	4f 01       	movw	r8, r30
						memset(number2,0,12);
  dc:	5e 01       	movw	r10, r28
  de:	fd e0       	ldi	r31, 0x0D	; 13
  e0:	af 0e       	add	r10, r31
  e2:	b1 1c       	adc	r11, r1
						memset(answer,0,12);
  e4:	ce 01       	movw	r24, r28
  e6:	49 96       	adiw	r24, 0x19	; 25
  e8:	9e a3       	std	Y+38, r25	; 0x26
  ea:	8d a3       	std	Y+37, r24	; 0x25
			lcd_data(key);
		
		switch(key)
		{
			case '+':	fun=key;			/*if key pressed is operator, put it in fun*/
						no1flag=i=0;
  ec:	19 a6       	std	Y+41, r1	; 0x29
	i=0;									 /*counter*/
	no1flag=1;								/*no1flag to indicate 1st number no1.*/
	
	while(1)
	{
		key=read_key();						/*detect key pressed*/
  ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <read_key>
  f2:	18 2f       	mov	r17, r24
		if(key!='c')						/*if key is not 'c'(clear/on) print key on LCD16x2 */
  f4:	83 36       	cpi	r24, 0x63	; 99
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x68>
  f8:	b5 c0       	rjmp	.+362    	; 0x264 <main+0x1d2>
			lcd_data(key);
  fa:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_data>
		
		switch(key)
  fe:	1f 32       	cpi	r17, 0x2F	; 47
 100:	79 f0       	breq	.+30     	; 0x120 <main+0x8e>
 102:	30 f4       	brcc	.+12     	; 0x110 <main+0x7e>
 104:	1b 32       	cpi	r17, 0x2B	; 43
 106:	61 f0       	breq	.+24     	; 0x120 <main+0x8e>
 108:	1d 32       	cpi	r17, 0x2D	; 45
 10a:	09 f0       	breq	.+2      	; 0x10e <main+0x7c>
 10c:	c1 c0       	rjmp	.+386    	; 0x290 <main+0x1fe>
 10e:	08 c0       	rjmp	.+16     	; 0x120 <main+0x8e>
 110:	13 36       	cpi	r17, 0x63	; 99
 112:	09 f4       	brne	.+2      	; 0x116 <main+0x84>
 114:	a7 c0       	rjmp	.+334    	; 0x264 <main+0x1d2>
 116:	18 37       	cpi	r17, 0x78	; 120
 118:	19 f0       	breq	.+6      	; 0x120 <main+0x8e>
 11a:	1d 33       	cpi	r17, 0x3D	; 61
 11c:	29 f0       	breq	.+10     	; 0x128 <main+0x96>
 11e:	b8 c0       	rjmp	.+368    	; 0x290 <main+0x1fe>
		{
			case '+':	fun=key;			/*if key pressed is operator, put it in fun*/
						no1flag=i=0;
 120:	39 a4       	ldd	r3, Y+41	; 0x29
	i=0;									 /*counter*/
	no1flag=1;								/*no1flag to indicate 1st number no1.*/
	
	while(1)
	{
		key=read_key();						/*detect key pressed*/
 122:	1f a3       	std	Y+39, r17	; 0x27
			lcd_data(key);
		
		switch(key)
		{
			case '+':	fun=key;			/*if key pressed is operator, put it in fun*/
						no1flag=i=0;
 124:	38 a6       	std	Y+40, r3	; 0x28
 126:	e3 cf       	rjmp	.-58     	; 0xee <main+0x5c>
			case '/':	fun=key;
						no1flag=i=0;
						break;
			
			case '=':
						no1=atol(number1);						/*convert no1 & no2 ASCII string to number*/
 128:	c4 01       	movw	r24, r8
 12a:	0e 94 a6 02 	call	0x54c	; 0x54c <atol>
 12e:	6b 01       	movw	r12, r22
 130:	7c 01       	movw	r14, r24
						no2=atol(number2);
 132:	c5 01       	movw	r24, r10
 134:	0e 94 a6 02 	call	0x54c	; 0x54c <atol>
 138:	2b 01       	movw	r4, r22
 13a:	3c 01       	movw	r6, r24
						lcd_command(0xc0);						/*answer on 2nd line*/
 13c:	80 ec       	ldi	r24, 0xC0	; 192
 13e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
						switch(fun)
 142:	1f a1       	ldd	r17, Y+39	; 0x27
 144:	1d 32       	cpi	r17, 0x2D	; 45
 146:	39 f1       	breq	.+78     	; 0x196 <main+0x104>
 148:	18 f4       	brcc	.+6      	; 0x150 <main+0xbe>
 14a:	1b 32       	cpi	r17, 0x2B	; 43
 14c:	39 f0       	breq	.+14     	; 0x15c <main+0xca>
 14e:	cf cf       	rjmp	.-98     	; 0xee <main+0x5c>
 150:	1f 32       	cpi	r17, 0x2F	; 47
 152:	09 f4       	brne	.+2      	; 0x156 <main+0xc4>
 154:	5b c0       	rjmp	.+182    	; 0x20c <main+0x17a>
 156:	18 37       	cpi	r17, 0x78	; 120
 158:	d1 f1       	breq	.+116    	; 0x1ce <main+0x13c>
 15a:	c9 cf       	rjmp	.-110    	; 0xee <main+0x5c>
						{
							case '+':ans=no1+no2;
 15c:	c4 0c       	add	r12, r4
 15e:	d5 1c       	adc	r13, r5
 160:	e6 1c       	adc	r14, r6
 162:	f7 1c       	adc	r15, r7
							sprintf(answer,"%ld",ans);				/*convert ans to ASCII string*/
 164:	ff 92       	push	r15
 166:	ef 92       	push	r14
 168:	df 92       	push	r13
 16a:	cf 92       	push	r12
 16c:	ab e7       	ldi	r26, 0x7B	; 123
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	bf 93       	push	r27
 172:	af 93       	push	r26
 174:	fe a1       	ldd	r31, Y+38	; 0x26
 176:	ff 93       	push	r31
 178:	2d a1       	ldd	r18, Y+37	; 0x25
 17a:	2f 93       	push	r18
 17c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sprintf>
							lcd_string(answer);
 180:	ce 01       	movw	r24, r28
 182:	49 96       	adiw	r24, 0x19	; 25
 184:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
							break;
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	1f a3       	std	Y+39, r17	; 0x27
 194:	ac cf       	rjmp	.-168    	; 0xee <main+0x5c>
							case '-':ans=no1-no2;
 196:	c4 18       	sub	r12, r4
 198:	d5 08       	sbc	r13, r5
 19a:	e6 08       	sbc	r14, r6
 19c:	f7 08       	sbc	r15, r7
							sprintf(answer,"%ld",ans);				/*convert ans to ASCII string*/
 19e:	ff 92       	push	r15
 1a0:	ef 92       	push	r14
 1a2:	df 92       	push	r13
 1a4:	cf 92       	push	r12
 1a6:	ab e7       	ldi	r26, 0x7B	; 123
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	bf 93       	push	r27
 1ac:	af 93       	push	r26
 1ae:	fe a1       	ldd	r31, Y+38	; 0x26
 1b0:	ff 93       	push	r31
 1b2:	2d a1       	ldd	r18, Y+37	; 0x25
 1b4:	2f 93       	push	r18
 1b6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sprintf>
							lcd_string(answer);
 1ba:	ce 01       	movw	r24, r28
 1bc:	49 96       	adiw	r24, 0x19	; 25
 1be:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
							break;
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	90 cf       	rjmp	.-224    	; 0xee <main+0x5c>
							case 'x':ans=no1*no2;
 1ce:	a7 01       	movw	r20, r14
 1d0:	96 01       	movw	r18, r12
 1d2:	c3 01       	movw	r24, r6
 1d4:	b2 01       	movw	r22, r4
 1d6:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsi3>
							sprintf(answer,"%ld",ans);				/*convert ans to ASCII string*/
 1da:	9f 93       	push	r25
 1dc:	8f 93       	push	r24
 1de:	7f 93       	push	r23
 1e0:	6f 93       	push	r22
 1e2:	ab e7       	ldi	r26, 0x7B	; 123
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	bf 93       	push	r27
 1e8:	af 93       	push	r26
 1ea:	fe a1       	ldd	r31, Y+38	; 0x26
 1ec:	ff 93       	push	r31
 1ee:	2d a1       	ldd	r18, Y+37	; 0x25
 1f0:	2f 93       	push	r18
 1f2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sprintf>
							lcd_string(answer);
 1f6:	ce 01       	movw	r24, r28
 1f8:	49 96       	adiw	r24, 0x19	; 25
 1fa:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
							break;
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	1f a3       	std	Y+39, r17	; 0x27
 20a:	71 cf       	rjmp	.-286    	; 0xee <main+0x5c>
							case '/':if (no2==0)
 20c:	41 14       	cp	r4, r1
 20e:	51 04       	cpc	r5, r1
 210:	61 04       	cpc	r6, r1
 212:	71 04       	cpc	r7, r1
 214:	41 f4       	brne	.+16     	; 0x226 <main+0x194>
							{	clear_LCD();
 216:	0e 94 34 02 	call	0x468	; 0x468 <clear_LCD>
								lcd_string("maths error");
 21a:	8f e7       	ldi	r24, 0x7F	; 127
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
								break;
 222:	1f a3       	std	Y+39, r17	; 0x27
 224:	64 cf       	rjmp	.-312    	; 0xee <main+0x5c>
							}
							ans=no1/no2;
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	a3 01       	movw	r20, r6
 22c:	92 01       	movw	r18, r4
 22e:	0e 94 4b 02 	call	0x496	; 0x496 <__divmodsi4>
							sprintf(answer,"%ld",ans);				/*convert ans to ASCII string*/
 232:	5f 93       	push	r21
 234:	4f 93       	push	r20
 236:	3f 93       	push	r19
 238:	2f 93       	push	r18
 23a:	ab e7       	ldi	r26, 0x7B	; 123
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	bf 93       	push	r27
 240:	af 93       	push	r26
 242:	fe a1       	ldd	r31, Y+38	; 0x26
 244:	ff 93       	push	r31
 246:	2d a1       	ldd	r18, Y+37	; 0x25
 248:	2f 93       	push	r18
 24a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sprintf>
							lcd_string(answer);
 24e:	ce 01       	movw	r24, r28
 250:	49 96       	adiw	r24, 0x19	; 25
 252:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_string>
							break;
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	1f a3       	std	Y+39, r17	; 0x27
 262:	45 cf       	rjmp	.-374    	; 0xee <main+0x5c>
						}
						break;
			
			case 'c':												/*clear function, clear all values*/
						memset(number1,0,12);						/*reset array to zero*/
 264:	d4 01       	movw	r26, r8
 266:	e2 2d       	mov	r30, r2
 268:	1d 92       	st	X+, r1
 26a:	ea 95       	dec	r30
 26c:	e9 f7       	brne	.-6      	; 0x268 <main+0x1d6>
						memset(number2,0,12);
 26e:	d5 01       	movw	r26, r10
 270:	e2 2d       	mov	r30, r2
 272:	1d 92       	st	X+, r1
 274:	ea 95       	dec	r30
 276:	e9 f7       	brne	.-6      	; 0x272 <main+0x1e0>
						memset(answer,0,12);
 278:	ad a1       	ldd	r26, Y+37	; 0x25
 27a:	be a1       	ldd	r27, Y+38	; 0x26
 27c:	e2 2d       	mov	r30, r2
 27e:	1d 92       	st	X+, r1
 280:	ea 95       	dec	r30
 282:	e9 f7       	brne	.-6      	; 0x27e <main+0x1ec>
						i=0;
						no1flag=1;
						ans=0;
						clear_LCD();
 284:	0e 94 34 02 	call	0x468	; 0x468 <clear_LCD>
			case 'c':												/*clear function, clear all values*/
						memset(number1,0,12);						/*reset array to zero*/
						memset(number2,0,12);
						memset(answer,0,12);
						i=0;
						no1flag=1;
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	f8 a7       	std	Y+40, r31	; 0x28
			
			case 'c':												/*clear function, clear all values*/
						memset(number1,0,12);						/*reset array to zero*/
						memset(number2,0,12);
						memset(answer,0,12);
						i=0;
 28c:	31 2c       	mov	r3, r1
						no1flag=1;
						ans=0;
						clear_LCD();
						break;
 28e:	2f cf       	rjmp	.-418    	; 0xee <main+0x5c>
				
			default:									/*if key pressed is not operator,'=' or 'C', then definitely it is number*/
					if(no1flag==1)
 290:	28 a5       	ldd	r18, Y+40	; 0x28
 292:	21 30       	cpi	r18, 0x01	; 1
 294:	29 f4       	brne	.+10     	; 0x2a0 <main+0x20e>
					number1[i]=key;						/*store 1st no1*/
 296:	f4 01       	movw	r30, r8
 298:	e3 0d       	add	r30, r3
 29a:	f1 1d       	adc	r31, r1
 29c:	10 83       	st	Z, r17
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <main+0x216>
					else
					number2[i]=key;						/*store 2nd no2.*/
 2a0:	f5 01       	movw	r30, r10
 2a2:	e3 0d       	add	r30, r3
 2a4:	f1 1d       	adc	r31, r1
 2a6:	10 83       	st	Z, r17
					i++;								/*increment array index*/
 2a8:	33 94       	inc	r3
 2aa:	21 cf       	rjmp	.-446    	; 0xee <main+0x5c>

000002ac <read_key>:

char read_key()
{
	while(1)
	{
		KEY_DDR = 0x0F;						/*making row output, column as input*/
 2ac:	3f e0       	ldi	r19, 0x0F	; 15
		KEY_PRT = 0xFF;						/*make output high and set internal pull up for input*/
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
			
			_delay_ms (50);							/*20 ms key debounce time*/
			colloc = (KEY_PIN & 0xF0);
		}while(colloc == 0xF0);						/*wait for key to press*/

		KEY_PRT = 0xFE;								/*row and column detection */
 2b0:	9e ef       	ldi	r25, 0xFE	; 254
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xFD;
 2b2:	6d ef       	ldi	r22, 0xFD	; 253
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xFB;
 2b4:	5b ef       	ldi	r21, 0xFB	; 251
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0xF7;
 2b6:	47 ef       	ldi	r20, 0xF7	; 247

char read_key()
{
	while(1)
	{
		KEY_DDR = 0x0F;						/*making row output, column as input*/
 2b8:	31 bb       	out	0x11, r19	; 17
		KEY_PRT = 0xFF;						/*make output high and set internal pull up for input*/
 2ba:	22 bb       	out	0x12, r18	; 18

		do
		{
			KEY_PRT &= 0xF0;				/*make rows low and column high*/
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
 2c2:	00 00       	nop
			colloc = (KEY_PIN & 0xF0);		/*take column value as input*/
 2c4:	80 b3       	in	r24, 0x10	; 16
 2c6:	80 7f       	andi	r24, 0xF0	; 240
 2c8:	80 93 8c 00 	sts	0x008C, r24
		}while(colloc != 0xF0);				/*wait for all keys to release*/
 2cc:	80 3f       	cpi	r24, 0xF0	; 240
 2ce:	b1 f7       	brne	.-20     	; 0x2bc <read_key+0x10>
 2d0:	7f ef       	ldi	r23, 0xFF	; 255
 2d2:	89 ef       	ldi	r24, 0xF9	; 249
 2d4:	e0 e0       	ldi	r30, 0x00	; 0
 2d6:	71 50       	subi	r23, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	e0 40       	sbci	r30, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <read_key+0x2a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <read_key+0x34>
 2e0:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(40);						/*20ms key debounce time*/
				colloc = (KEY_PIN & 0xF0);
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	80 93 8c 00 	sts	0x008C, r24
			}while(colloc == 0xF0);
 2ea:	80 3f       	cpi	r24, 0xF0	; 240
 2ec:	89 f3       	breq	.-30     	; 0x2d0 <read_key+0x24>
 2ee:	7f e7       	ldi	r23, 0x7F	; 127
 2f0:	88 e3       	ldi	r24, 0x38	; 56
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	71 50       	subi	r23, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	e0 40       	sbci	r30, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <read_key+0x48>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <read_key+0x52>
 2fe:	00 00       	nop
			
			_delay_ms (50);							/*20 ms key debounce time*/
			colloc = (KEY_PIN & 0xF0);
 300:	80 b3       	in	r24, 0x10	; 16
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	80 93 8c 00 	sts	0x008C, r24
		}while(colloc == 0xF0);						/*wait for key to press*/
 308:	80 3f       	cpi	r24, 0xF0	; 240
 30a:	11 f3       	breq	.-60     	; 0x2d0 <read_key+0x24>

		KEY_PRT = 0xFE;								/*row and column detection */
 30c:	92 bb       	out	0x12, r25	; 18
		asm("NOP");
 30e:	00 00       	nop
		colloc = (KEY_PIN & 0xF0);
 310:	80 b3       	in	r24, 0x10	; 16
 312:	80 7f       	andi	r24, 0xF0	; 240
 314:	80 93 8c 00 	sts	0x008C, r24
		if(colloc != 0xF0)
 318:	80 3f       	cpi	r24, 0xF0	; 240
 31a:	19 f0       	breq	.+6      	; 0x322 <read_key+0x76>
		{
			rowloc = 0;
 31c:	10 92 8d 00 	sts	0x008D, r1
			break;
 320:	24 c0       	rjmp	.+72     	; 0x36a <read_key+0xbe>
		}

		KEY_PRT = 0xFD;
 322:	62 bb       	out	0x12, r22	; 18
		asm("NOP");
 324:	00 00       	nop
		colloc = (KEY_PIN & 0xF0);
 326:	80 b3       	in	r24, 0x10	; 16
 328:	80 7f       	andi	r24, 0xF0	; 240
 32a:	80 93 8c 00 	sts	0x008C, r24
		if(colloc != 0xF0)
 32e:	80 3f       	cpi	r24, 0xF0	; 240
 330:	21 f0       	breq	.+8      	; 0x33a <read_key+0x8e>
		{
			rowloc = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 8d 00 	sts	0x008D, r24
			break;
 338:	18 c0       	rjmp	.+48     	; 0x36a <read_key+0xbe>
		}
		
		KEY_PRT = 0xFB;
 33a:	52 bb       	out	0x12, r21	; 18
		asm("NOP");
 33c:	00 00       	nop
		colloc = (KEY_PIN & 0xF0);
 33e:	80 b3       	in	r24, 0x10	; 16
 340:	80 7f       	andi	r24, 0xF0	; 240
 342:	80 93 8c 00 	sts	0x008C, r24
		if(colloc != 0xF0)
 346:	80 3f       	cpi	r24, 0xF0	; 240
 348:	21 f0       	breq	.+8      	; 0x352 <read_key+0xa6>
		{
			rowloc = 2;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 8d 00 	sts	0x008D, r24
			break;
 350:	0c c0       	rjmp	.+24     	; 0x36a <read_key+0xbe>
		}

		KEY_PRT = 0xF7;
 352:	42 bb       	out	0x12, r20	; 18
		asm("NOP");
 354:	00 00       	nop
		colloc = (KEY_PIN & 0xF0);
 356:	80 b3       	in	r24, 0x10	; 16
 358:	80 7f       	andi	r24, 0xF0	; 240
 35a:	80 93 8c 00 	sts	0x008C, r24
		if(colloc != 0xF0)
 35e:	80 3f       	cpi	r24, 0xF0	; 240
 360:	09 f4       	brne	.+2      	; 0x364 <read_key+0xb8>
 362:	aa cf       	rjmp	.-172    	; 0x2b8 <read_key+0xc>
		{
			rowloc = 3;
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 93 8d 00 	sts	0x008D, r24
			break;
		}
	}

	
	if(colloc == 0xE0)				/*return the key value*/
 36a:	80 91 8c 00 	lds	r24, 0x008C
 36e:	80 3e       	cpi	r24, 0xE0	; 224
 370:	59 f4       	brne	.+22     	; 0x388 <read_key+0xdc>
	return(keypad[rowloc][0]);
 372:	e0 91 8d 00 	lds	r30, 0x008D
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e0 5a       	subi	r30, 0xA0	; 160
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	80 81       	ld	r24, Z
 386:	08 95       	ret
	
	else if(colloc == 0xD0)
 388:	80 3d       	cpi	r24, 0xD0	; 208
 38a:	59 f4       	brne	.+22     	; 0x3a2 <read_key+0xf6>
	return(keypad[rowloc][1]);
 38c:	e0 91 8d 00 	lds	r30, 0x008D
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	e0 5a       	subi	r30, 0xA0	; 160
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	81 81       	ldd	r24, Z+1	; 0x01
 3a0:	08 95       	ret
	
	else if(colloc == 0xB0)
 3a2:	80 3b       	cpi	r24, 0xB0	; 176
 3a4:	59 f4       	brne	.+22     	; 0x3bc <read_key+0x110>
	return(keypad[rowloc][2]);
 3a6:	e0 91 8d 00 	lds	r30, 0x008D
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e0 5a       	subi	r30, 0xA0	; 160
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	82 81       	ldd	r24, Z+2	; 0x02
 3ba:	08 95       	ret
	
	else
	return(keypad[rowloc][3]);
 3bc:	e0 91 8d 00 	lds	r30, 0x008D
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	e0 5a       	subi	r30, 0xA0	; 160
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
}
 3d0:	08 95       	ret

000003d2 <lcd_command>:


void lcd_command (char cmd)				/* LCD command write function */

{
	lcd_data_port = cmd;							/* Write command data to LCD data port */	
 3d2:	88 bb       	out	0x18, r24	; 24
	lcd_command_port = (0<<rs)|(0<<rw)|(1<<en);		/* Make rs LOW (command reg.), rw LOW (Write), en HIGH (Enable) */
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	8f ec       	ldi	r24, 0xCF	; 207
 3da:	97 e0       	ldi	r25, 0x07	; 7
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_command+0xa>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <lcd_command+0x10>
 3e2:	00 00       	nop
	_delay_ms(1);									/* Wait for 1ms to get data write from port to command reg. */
	lcd_command_port = (0<<rs)|(0<<rw)|(0<<en);		/* Make rs LOW (command reg.), rw LOW (Write), en LOW (Disable) */
 3e4:	1b ba       	out	0x1b, r1	; 27
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	97 e2       	ldi	r25, 0x27	; 39
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_command+0x18>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <lcd_command+0x1e>
 3f0:	00 00       	nop
 3f2:	08 95       	ret

000003f4 <lcd_data>:
}

void lcd_data (char data)					/* LCD data write function */

{
	lcd_data_port = data ;							/* Write data to LCD data port */
 3f4:	88 bb       	out	0x18, r24	; 24
	lcd_command_port = (1<<rs)|(0<<rw)|(1<<en);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Enable) */
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	8b bb       	out	0x1b, r24	; 27
 3fa:	8f ec       	ldi	r24, 0xCF	; 207
 3fc:	97 e0       	ldi	r25, 0x07	; 7
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_data+0xa>
 402:	00 c0       	rjmp	.+0      	; 0x404 <lcd_data+0x10>
 404:	00 00       	nop
	_delay_ms(1);									/* Wait for 1ms to get data write from port to data reg. */
	lcd_command_port = (1<<rs)|(0<<rw)|(0<<en);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Disable) */
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	8b bb       	out	0x1b, r24	; 27
 40a:	8f e0       	ldi	r24, 0x0F	; 15
 40c:	97 e2       	ldi	r25, 0x27	; 39
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <lcd_data+0x1a>
 412:	00 c0       	rjmp	.+0      	; 0x414 <lcd_data+0x20>
 414:	00 00       	nop
 416:	08 95       	ret

00000418 <lcd_init>:
 418:	2f e7       	ldi	r18, 0x7F	; 127
 41a:	88 e3       	ldi	r24, 0x38	; 56
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <lcd_init+0x6>
 426:	00 c0       	rjmp	.+0      	; 0x428 <lcd_init+0x10>
 428:	00 00       	nop

void lcd_init (void)								/* LCD Initialize function */

{
	_delay_ms(50);									/* LCD Initial time */
	lcd_command_dir = 0xFF;							/* Make LCD command port direction as o/p */
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	8a bb       	out	0x1a, r24	; 26
	lcd_data_dir = 0xFF;							/* Make LCD data port direction as o/p */
 42e:	87 bb       	out	0x17, r24	; 23
	
	lcd_command (0x38);								/* Initialization of 16X2 LCD in 8bit mode */
 430:	88 e3       	ldi	r24, 0x38	; 56
 432:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
	lcd_command (0x01);								/* Clear LCD */
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
	lcd_command (0x0C);								/* Cursor OFF */
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
	lcd_command (0x80);								/* 8 is for first line and 0 is for 0th position */
 442:	80 e8       	ldi	r24, 0x80	; 128
 444:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
 448:	08 95       	ret

0000044a <lcd_string>:
}

void lcd_string (char *str)				/* Send string to LCD function */
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 450:	88 81       	ld	r24, Y
 452:	88 23       	and	r24, r24
 454:	31 f0       	breq	.+12     	; 0x462 <__stack+0x3>
 456:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data (str[i]);							/* Call LCD data write */
 458:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_data>
}

void lcd_string (char *str)				/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 45c:	89 91       	ld	r24, Y+
 45e:	81 11       	cpse	r24, r1
 460:	fb cf       	rjmp	.-10     	; 0x458 <lcd_string+0xe>
	{
		lcd_data (str[i]);							/* Call LCD data write */
	}
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <clear_LCD>:

void clear_LCD()
{
	lcd_command(0x01);				/*Clear LCD16x2*/
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
	lcd_command(0x80);
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_command>
 474:	08 95       	ret

00000476 <__mulsi3>:
 476:	db 01       	movw	r26, r22
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__muluhisi3>
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	a2 9f       	mul	r26, r18
 486:	80 0d       	add	r24, r0
 488:	91 1d       	adc	r25, r1
 48a:	a3 9f       	mul	r26, r19
 48c:	90 0d       	add	r25, r0
 48e:	b2 9f       	mul	r27, r18
 490:	90 0d       	add	r25, r0
 492:	11 24       	eor	r1, r1
 494:	08 95       	ret

00000496 <__divmodsi4>:
 496:	05 2e       	mov	r0, r21
 498:	97 fb       	bst	r25, 7
 49a:	1e f4       	brtc	.+6      	; 0x4a2 <__divmodsi4+0xc>
 49c:	00 94       	com	r0
 49e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__negsi2>
 4a2:	57 fd       	sbrc	r21, 7
 4a4:	07 d0       	rcall	.+14     	; 0x4b4 <__divmodsi4_neg2>
 4a6:	0e 94 75 02 	call	0x4ea	; 0x4ea <__udivmodsi4>
 4aa:	07 fc       	sbrc	r0, 7
 4ac:	03 d0       	rcall	.+6      	; 0x4b4 <__divmodsi4_neg2>
 4ae:	4e f4       	brtc	.+18     	; 0x4c2 <__divmodsi4_exit>
 4b0:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__negsi2>

000004b4 <__divmodsi4_neg2>:
 4b4:	50 95       	com	r21
 4b6:	40 95       	com	r20
 4b8:	30 95       	com	r19
 4ba:	21 95       	neg	r18
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	4f 4f       	sbci	r20, 0xFF	; 255
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255

000004c2 <__divmodsi4_exit>:
 4c2:	08 95       	ret

000004c4 <__negsi2>:
 4c4:	90 95       	com	r25
 4c6:	80 95       	com	r24
 4c8:	70 95       	com	r23
 4ca:	61 95       	neg	r22
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__muluhisi3>:
 4d4:	0e 94 97 02 	call	0x52e	; 0x52e <__umulhisi3>
 4d8:	a5 9f       	mul	r26, r21
 4da:	90 0d       	add	r25, r0
 4dc:	b4 9f       	mul	r27, r20
 4de:	90 0d       	add	r25, r0
 4e0:	a4 9f       	mul	r26, r20
 4e2:	80 0d       	add	r24, r0
 4e4:	91 1d       	adc	r25, r1
 4e6:	11 24       	eor	r1, r1
 4e8:	08 95       	ret

000004ea <__udivmodsi4>:
 4ea:	a1 e2       	ldi	r26, 0x21	; 33
 4ec:	1a 2e       	mov	r1, r26
 4ee:	aa 1b       	sub	r26, r26
 4f0:	bb 1b       	sub	r27, r27
 4f2:	fd 01       	movw	r30, r26
 4f4:	0d c0       	rjmp	.+26     	; 0x510 <__udivmodsi4_ep>

000004f6 <__udivmodsi4_loop>:
 4f6:	aa 1f       	adc	r26, r26
 4f8:	bb 1f       	adc	r27, r27
 4fa:	ee 1f       	adc	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	a2 17       	cp	r26, r18
 500:	b3 07       	cpc	r27, r19
 502:	e4 07       	cpc	r30, r20
 504:	f5 07       	cpc	r31, r21
 506:	20 f0       	brcs	.+8      	; 0x510 <__udivmodsi4_ep>
 508:	a2 1b       	sub	r26, r18
 50a:	b3 0b       	sbc	r27, r19
 50c:	e4 0b       	sbc	r30, r20
 50e:	f5 0b       	sbc	r31, r21

00000510 <__udivmodsi4_ep>:
 510:	66 1f       	adc	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	1a 94       	dec	r1
 51a:	69 f7       	brne	.-38     	; 0x4f6 <__udivmodsi4_loop>
 51c:	60 95       	com	r22
 51e:	70 95       	com	r23
 520:	80 95       	com	r24
 522:	90 95       	com	r25
 524:	9b 01       	movw	r18, r22
 526:	ac 01       	movw	r20, r24
 528:	bd 01       	movw	r22, r26
 52a:	cf 01       	movw	r24, r30
 52c:	08 95       	ret

0000052e <__umulhisi3>:
 52e:	a2 9f       	mul	r26, r18
 530:	b0 01       	movw	r22, r0
 532:	b3 9f       	mul	r27, r19
 534:	c0 01       	movw	r24, r0
 536:	a3 9f       	mul	r26, r19
 538:	70 0d       	add	r23, r0
 53a:	81 1d       	adc	r24, r1
 53c:	11 24       	eor	r1, r1
 53e:	91 1d       	adc	r25, r1
 540:	b2 9f       	mul	r27, r18
 542:	70 0d       	add	r23, r0
 544:	81 1d       	adc	r24, r1
 546:	11 24       	eor	r1, r1
 548:	91 1d       	adc	r25, r1
 54a:	08 95       	ret

0000054c <atol>:
 54c:	1f 93       	push	r17
 54e:	fc 01       	movw	r30, r24
 550:	99 27       	eor	r25, r25
 552:	88 27       	eor	r24, r24
 554:	bc 01       	movw	r22, r24
 556:	e8 94       	clt
 558:	11 91       	ld	r17, Z+
 55a:	10 32       	cpi	r17, 0x20	; 32
 55c:	e9 f3       	breq	.-6      	; 0x558 <atol+0xc>
 55e:	19 30       	cpi	r17, 0x09	; 9
 560:	10 f0       	brcs	.+4      	; 0x566 <atol+0x1a>
 562:	1e 30       	cpi	r17, 0x0E	; 14
 564:	c8 f3       	brcs	.-14     	; 0x558 <atol+0xc>
 566:	1b 32       	cpi	r17, 0x2B	; 43
 568:	51 f0       	breq	.+20     	; 0x57e <atol+0x32>
 56a:	1d 32       	cpi	r17, 0x2D	; 45
 56c:	49 f4       	brne	.+18     	; 0x580 <atol+0x34>
 56e:	68 94       	set
 570:	06 c0       	rjmp	.+12     	; 0x57e <atol+0x32>
 572:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsi_const_10>
 576:	61 0f       	add	r22, r17
 578:	71 1d       	adc	r23, r1
 57a:	81 1d       	adc	r24, r1
 57c:	91 1d       	adc	r25, r1
 57e:	11 91       	ld	r17, Z+
 580:	10 53       	subi	r17, 0x30	; 48
 582:	1a 30       	cpi	r17, 0x0A	; 10
 584:	b0 f3       	brcs	.-20     	; 0x572 <atol+0x26>
 586:	3e f4       	brtc	.+14     	; 0x596 <atol+0x4a>
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	1f 91       	pop	r17
 598:	08 95       	ret

0000059a <__mulsi_const_10>:
 59a:	59 2f       	mov	r21, r25
 59c:	48 2f       	mov	r20, r24
 59e:	37 2f       	mov	r19, r23
 5a0:	26 2f       	mov	r18, r22
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	62 0f       	add	r22, r18
 5b4:	73 1f       	adc	r23, r19
 5b6:	84 1f       	adc	r24, r20
 5b8:	95 1f       	adc	r25, r21
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	08 95       	ret

000005c4 <sprintf>:
 5c4:	ae e0       	ldi	r26, 0x0E	; 14
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e8 ee       	ldi	r30, 0xE8	; 232
 5ca:	f2 e0       	ldi	r31, 0x02	; 2
 5cc:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__prologue_saves__+0x1c>
 5d0:	0d 89       	ldd	r16, Y+21	; 0x15
 5d2:	1e 89       	ldd	r17, Y+22	; 0x16
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	8c 83       	std	Y+4, r24	; 0x04
 5d8:	1a 83       	std	Y+2, r17	; 0x02
 5da:	09 83       	std	Y+1, r16	; 0x01
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	9f e7       	ldi	r25, 0x7F	; 127
 5e0:	9e 83       	std	Y+6, r25	; 0x06
 5e2:	8d 83       	std	Y+5, r24	; 0x05
 5e4:	ae 01       	movw	r20, r28
 5e6:	47 5e       	subi	r20, 0xE7	; 231
 5e8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ea:	6f 89       	ldd	r22, Y+23	; 0x17
 5ec:	78 8d       	ldd	r23, Y+24	; 0x18
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 04 03 	call	0x608	; 0x608 <vfprintf>
 5f6:	ef 81       	ldd	r30, Y+7	; 0x07
 5f8:	f8 85       	ldd	r31, Y+8	; 0x08
 5fa:	e0 0f       	add	r30, r16
 5fc:	f1 1f       	adc	r31, r17
 5fe:	10 82       	st	Z, r1
 600:	2e 96       	adiw	r28, 0x0e	; 14
 602:	e4 e0       	ldi	r30, 0x04	; 4
 604:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__epilogue_restores__+0x1c>

00000608 <vfprintf>:
 608:	ac e0       	ldi	r26, 0x0C	; 12
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	ea e0       	ldi	r30, 0x0A	; 10
 60e:	f3 e0       	ldi	r31, 0x03	; 3
 610:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__prologue_saves__>
 614:	7c 01       	movw	r14, r24
 616:	6b 01       	movw	r12, r22
 618:	8a 01       	movw	r16, r20
 61a:	fc 01       	movw	r30, r24
 61c:	17 82       	std	Z+7, r1	; 0x07
 61e:	16 82       	std	Z+6, r1	; 0x06
 620:	83 81       	ldd	r24, Z+3	; 0x03
 622:	81 ff       	sbrs	r24, 1
 624:	bd c1       	rjmp	.+890    	; 0x9a0 <vfprintf+0x398>
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	4c 01       	movw	r8, r24
 62c:	f7 01       	movw	r30, r14
 62e:	93 81       	ldd	r25, Z+3	; 0x03
 630:	f6 01       	movw	r30, r12
 632:	93 fd       	sbrc	r25, 3
 634:	85 91       	lpm	r24, Z+
 636:	93 ff       	sbrs	r25, 3
 638:	81 91       	ld	r24, Z+
 63a:	6f 01       	movw	r12, r30
 63c:	88 23       	and	r24, r24
 63e:	09 f4       	brne	.+2      	; 0x642 <vfprintf+0x3a>
 640:	ab c1       	rjmp	.+854    	; 0x998 <vfprintf+0x390>
 642:	85 32       	cpi	r24, 0x25	; 37
 644:	39 f4       	brne	.+14     	; 0x654 <vfprintf+0x4c>
 646:	93 fd       	sbrc	r25, 3
 648:	85 91       	lpm	r24, Z+
 64a:	93 ff       	sbrs	r25, 3
 64c:	81 91       	ld	r24, Z+
 64e:	6f 01       	movw	r12, r30
 650:	85 32       	cpi	r24, 0x25	; 37
 652:	29 f4       	brne	.+10     	; 0x65e <vfprintf+0x56>
 654:	b7 01       	movw	r22, r14
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 65c:	e7 cf       	rjmp	.-50     	; 0x62c <vfprintf+0x24>
 65e:	51 2c       	mov	r5, r1
 660:	31 2c       	mov	r3, r1
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	20 32       	cpi	r18, 0x20	; 32
 666:	a0 f4       	brcc	.+40     	; 0x690 <vfprintf+0x88>
 668:	8b 32       	cpi	r24, 0x2B	; 43
 66a:	69 f0       	breq	.+26     	; 0x686 <vfprintf+0x7e>
 66c:	30 f4       	brcc	.+12     	; 0x67a <vfprintf+0x72>
 66e:	80 32       	cpi	r24, 0x20	; 32
 670:	59 f0       	breq	.+22     	; 0x688 <vfprintf+0x80>
 672:	83 32       	cpi	r24, 0x23	; 35
 674:	69 f4       	brne	.+26     	; 0x690 <vfprintf+0x88>
 676:	20 61       	ori	r18, 0x10	; 16
 678:	2c c0       	rjmp	.+88     	; 0x6d2 <vfprintf+0xca>
 67a:	8d 32       	cpi	r24, 0x2D	; 45
 67c:	39 f0       	breq	.+14     	; 0x68c <vfprintf+0x84>
 67e:	80 33       	cpi	r24, 0x30	; 48
 680:	39 f4       	brne	.+14     	; 0x690 <vfprintf+0x88>
 682:	21 60       	ori	r18, 0x01	; 1
 684:	26 c0       	rjmp	.+76     	; 0x6d2 <vfprintf+0xca>
 686:	22 60       	ori	r18, 0x02	; 2
 688:	24 60       	ori	r18, 0x04	; 4
 68a:	23 c0       	rjmp	.+70     	; 0x6d2 <vfprintf+0xca>
 68c:	28 60       	ori	r18, 0x08	; 8
 68e:	21 c0       	rjmp	.+66     	; 0x6d2 <vfprintf+0xca>
 690:	27 fd       	sbrc	r18, 7
 692:	27 c0       	rjmp	.+78     	; 0x6e2 <vfprintf+0xda>
 694:	30 ed       	ldi	r19, 0xD0	; 208
 696:	38 0f       	add	r19, r24
 698:	3a 30       	cpi	r19, 0x0A	; 10
 69a:	78 f4       	brcc	.+30     	; 0x6ba <vfprintf+0xb2>
 69c:	26 ff       	sbrs	r18, 6
 69e:	06 c0       	rjmp	.+12     	; 0x6ac <vfprintf+0xa4>
 6a0:	fa e0       	ldi	r31, 0x0A	; 10
 6a2:	5f 9e       	mul	r5, r31
 6a4:	30 0d       	add	r19, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	53 2e       	mov	r5, r19
 6aa:	13 c0       	rjmp	.+38     	; 0x6d2 <vfprintf+0xca>
 6ac:	8a e0       	ldi	r24, 0x0A	; 10
 6ae:	38 9e       	mul	r3, r24
 6b0:	30 0d       	add	r19, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	33 2e       	mov	r3, r19
 6b6:	20 62       	ori	r18, 0x20	; 32
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <vfprintf+0xca>
 6ba:	8e 32       	cpi	r24, 0x2E	; 46
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <vfprintf+0xbe>
 6be:	26 fd       	sbrc	r18, 6
 6c0:	6b c1       	rjmp	.+726    	; 0x998 <vfprintf+0x390>
 6c2:	20 64       	ori	r18, 0x40	; 64
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <vfprintf+0xca>
 6c6:	8c 36       	cpi	r24, 0x6C	; 108
 6c8:	11 f4       	brne	.+4      	; 0x6ce <vfprintf+0xc6>
 6ca:	20 68       	ori	r18, 0x80	; 128
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <vfprintf+0xca>
 6ce:	88 36       	cpi	r24, 0x68	; 104
 6d0:	41 f4       	brne	.+16     	; 0x6e2 <vfprintf+0xda>
 6d2:	f6 01       	movw	r30, r12
 6d4:	93 fd       	sbrc	r25, 3
 6d6:	85 91       	lpm	r24, Z+
 6d8:	93 ff       	sbrs	r25, 3
 6da:	81 91       	ld	r24, Z+
 6dc:	6f 01       	movw	r12, r30
 6de:	81 11       	cpse	r24, r1
 6e0:	c1 cf       	rjmp	.-126    	; 0x664 <vfprintf+0x5c>
 6e2:	98 2f       	mov	r25, r24
 6e4:	9f 7d       	andi	r25, 0xDF	; 223
 6e6:	95 54       	subi	r25, 0x45	; 69
 6e8:	93 30       	cpi	r25, 0x03	; 3
 6ea:	28 f4       	brcc	.+10     	; 0x6f6 <vfprintf+0xee>
 6ec:	0c 5f       	subi	r16, 0xFC	; 252
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	ff e3       	ldi	r31, 0x3F	; 63
 6f2:	f9 83       	std	Y+1, r31	; 0x01
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <vfprintf+0x108>
 6f6:	83 36       	cpi	r24, 0x63	; 99
 6f8:	31 f0       	breq	.+12     	; 0x706 <vfprintf+0xfe>
 6fa:	83 37       	cpi	r24, 0x73	; 115
 6fc:	71 f0       	breq	.+28     	; 0x71a <vfprintf+0x112>
 6fe:	83 35       	cpi	r24, 0x53	; 83
 700:	09 f0       	breq	.+2      	; 0x704 <vfprintf+0xfc>
 702:	5b c0       	rjmp	.+182    	; 0x7ba <vfprintf+0x1b2>
 704:	22 c0       	rjmp	.+68     	; 0x74a <vfprintf+0x142>
 706:	f8 01       	movw	r30, r16
 708:	80 81       	ld	r24, Z
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	44 24       	eor	r4, r4
 712:	43 94       	inc	r4
 714:	51 2c       	mov	r5, r1
 716:	54 01       	movw	r10, r8
 718:	15 c0       	rjmp	.+42     	; 0x744 <vfprintf+0x13c>
 71a:	38 01       	movw	r6, r16
 71c:	f2 e0       	ldi	r31, 0x02	; 2
 71e:	6f 0e       	add	r6, r31
 720:	71 1c       	adc	r7, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	26 ff       	sbrs	r18, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x12a>
 72c:	65 2d       	mov	r22, r5
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x12e>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	2c 87       	std	Y+12, r18	; 0x0c
 73a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <strnlen>
 73e:	2c 01       	movw	r4, r24
 740:	83 01       	movw	r16, r6
 742:	2c 85       	ldd	r18, Y+12	; 0x0c
 744:	2f 77       	andi	r18, 0x7F	; 127
 746:	22 2e       	mov	r2, r18
 748:	17 c0       	rjmp	.+46     	; 0x778 <vfprintf+0x170>
 74a:	38 01       	movw	r6, r16
 74c:	f2 e0       	ldi	r31, 0x02	; 2
 74e:	6f 0e       	add	r6, r31
 750:	71 1c       	adc	r7, r1
 752:	f8 01       	movw	r30, r16
 754:	a0 80       	ld	r10, Z
 756:	b1 80       	ldd	r11, Z+1	; 0x01
 758:	26 ff       	sbrs	r18, 6
 75a:	03 c0       	rjmp	.+6      	; 0x762 <vfprintf+0x15a>
 75c:	65 2d       	mov	r22, r5
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0x15e>
 762:	6f ef       	ldi	r22, 0xFF	; 255
 764:	7f ef       	ldi	r23, 0xFF	; 255
 766:	c5 01       	movw	r24, r10
 768:	2c 87       	std	Y+12, r18	; 0x0c
 76a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <strnlen_P>
 76e:	2c 01       	movw	r4, r24
 770:	2c 85       	ldd	r18, Y+12	; 0x0c
 772:	20 68       	ori	r18, 0x80	; 128
 774:	22 2e       	mov	r2, r18
 776:	83 01       	movw	r16, r6
 778:	23 fc       	sbrc	r2, 3
 77a:	1b c0       	rjmp	.+54     	; 0x7b2 <vfprintf+0x1aa>
 77c:	83 2d       	mov	r24, r3
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	48 16       	cp	r4, r24
 782:	59 06       	cpc	r5, r25
 784:	b0 f4       	brcc	.+44     	; 0x7b2 <vfprintf+0x1aa>
 786:	b7 01       	movw	r22, r14
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 790:	3a 94       	dec	r3
 792:	f4 cf       	rjmp	.-24     	; 0x77c <vfprintf+0x174>
 794:	f5 01       	movw	r30, r10
 796:	27 fc       	sbrc	r2, 7
 798:	85 91       	lpm	r24, Z+
 79a:	27 fe       	sbrs	r2, 7
 79c:	81 91       	ld	r24, Z+
 79e:	5f 01       	movw	r10, r30
 7a0:	b7 01       	movw	r22, r14
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 7a8:	31 10       	cpse	r3, r1
 7aa:	3a 94       	dec	r3
 7ac:	f1 e0       	ldi	r31, 0x01	; 1
 7ae:	4f 1a       	sub	r4, r31
 7b0:	51 08       	sbc	r5, r1
 7b2:	41 14       	cp	r4, r1
 7b4:	51 04       	cpc	r5, r1
 7b6:	71 f7       	brne	.-36     	; 0x794 <vfprintf+0x18c>
 7b8:	e5 c0       	rjmp	.+458    	; 0x984 <vfprintf+0x37c>
 7ba:	84 36       	cpi	r24, 0x64	; 100
 7bc:	11 f0       	breq	.+4      	; 0x7c2 <vfprintf+0x1ba>
 7be:	89 36       	cpi	r24, 0x69	; 105
 7c0:	39 f5       	brne	.+78     	; 0x810 <vfprintf+0x208>
 7c2:	f8 01       	movw	r30, r16
 7c4:	27 ff       	sbrs	r18, 7
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <vfprintf+0x1ce>
 7c8:	60 81       	ld	r22, Z
 7ca:	71 81       	ldd	r23, Z+1	; 0x01
 7cc:	82 81       	ldd	r24, Z+2	; 0x02
 7ce:	93 81       	ldd	r25, Z+3	; 0x03
 7d0:	0c 5f       	subi	r16, 0xFC	; 252
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	08 c0       	rjmp	.+16     	; 0x7e6 <vfprintf+0x1de>
 7d6:	60 81       	ld	r22, Z
 7d8:	71 81       	ldd	r23, Z+1	; 0x01
 7da:	88 27       	eor	r24, r24
 7dc:	77 fd       	sbrc	r23, 7
 7de:	80 95       	com	r24
 7e0:	98 2f       	mov	r25, r24
 7e2:	0e 5f       	subi	r16, 0xFE	; 254
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	2f 76       	andi	r18, 0x6F	; 111
 7e8:	b2 2e       	mov	r11, r18
 7ea:	97 ff       	sbrs	r25, 7
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x1f8>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	20 68       	ori	r18, 0x80	; 128
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	a4 01       	movw	r20, r8
 806:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__ultoa_invert>
 80a:	a8 2e       	mov	r10, r24
 80c:	a8 18       	sub	r10, r8
 80e:	44 c0       	rjmp	.+136    	; 0x898 <vfprintf+0x290>
 810:	85 37       	cpi	r24, 0x75	; 117
 812:	29 f4       	brne	.+10     	; 0x81e <vfprintf+0x216>
 814:	2f 7e       	andi	r18, 0xEF	; 239
 816:	b2 2e       	mov	r11, r18
 818:	2a e0       	ldi	r18, 0x0A	; 10
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	25 c0       	rjmp	.+74     	; 0x868 <vfprintf+0x260>
 81e:	f2 2f       	mov	r31, r18
 820:	f9 7f       	andi	r31, 0xF9	; 249
 822:	bf 2e       	mov	r11, r31
 824:	8f 36       	cpi	r24, 0x6F	; 111
 826:	c1 f0       	breq	.+48     	; 0x858 <vfprintf+0x250>
 828:	18 f4       	brcc	.+6      	; 0x830 <vfprintf+0x228>
 82a:	88 35       	cpi	r24, 0x58	; 88
 82c:	79 f0       	breq	.+30     	; 0x84c <vfprintf+0x244>
 82e:	b4 c0       	rjmp	.+360    	; 0x998 <vfprintf+0x390>
 830:	80 37       	cpi	r24, 0x70	; 112
 832:	19 f0       	breq	.+6      	; 0x83a <vfprintf+0x232>
 834:	88 37       	cpi	r24, 0x78	; 120
 836:	21 f0       	breq	.+8      	; 0x840 <vfprintf+0x238>
 838:	af c0       	rjmp	.+350    	; 0x998 <vfprintf+0x390>
 83a:	2f 2f       	mov	r18, r31
 83c:	20 61       	ori	r18, 0x10	; 16
 83e:	b2 2e       	mov	r11, r18
 840:	b4 fe       	sbrs	r11, 4
 842:	0d c0       	rjmp	.+26     	; 0x85e <vfprintf+0x256>
 844:	8b 2d       	mov	r24, r11
 846:	84 60       	ori	r24, 0x04	; 4
 848:	b8 2e       	mov	r11, r24
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x256>
 84c:	24 ff       	sbrs	r18, 4
 84e:	0a c0       	rjmp	.+20     	; 0x864 <vfprintf+0x25c>
 850:	9f 2f       	mov	r25, r31
 852:	96 60       	ori	r25, 0x06	; 6
 854:	b9 2e       	mov	r11, r25
 856:	06 c0       	rjmp	.+12     	; 0x864 <vfprintf+0x25c>
 858:	28 e0       	ldi	r18, 0x08	; 8
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	05 c0       	rjmp	.+10     	; 0x868 <vfprintf+0x260>
 85e:	20 e1       	ldi	r18, 0x10	; 16
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x260>
 864:	20 e1       	ldi	r18, 0x10	; 16
 866:	32 e0       	ldi	r19, 0x02	; 2
 868:	f8 01       	movw	r30, r16
 86a:	b7 fe       	sbrs	r11, 7
 86c:	07 c0       	rjmp	.+14     	; 0x87c <vfprintf+0x274>
 86e:	60 81       	ld	r22, Z
 870:	71 81       	ldd	r23, Z+1	; 0x01
 872:	82 81       	ldd	r24, Z+2	; 0x02
 874:	93 81       	ldd	r25, Z+3	; 0x03
 876:	0c 5f       	subi	r16, 0xFC	; 252
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x280>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	a4 01       	movw	r20, r8
 88a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__ultoa_invert>
 88e:	a8 2e       	mov	r10, r24
 890:	a8 18       	sub	r10, r8
 892:	fb 2d       	mov	r31, r11
 894:	ff 77       	andi	r31, 0x7F	; 127
 896:	bf 2e       	mov	r11, r31
 898:	b6 fe       	sbrs	r11, 6
 89a:	0b c0       	rjmp	.+22     	; 0x8b2 <vfprintf+0x2aa>
 89c:	2b 2d       	mov	r18, r11
 89e:	2e 7f       	andi	r18, 0xFE	; 254
 8a0:	a5 14       	cp	r10, r5
 8a2:	50 f4       	brcc	.+20     	; 0x8b8 <vfprintf+0x2b0>
 8a4:	b4 fe       	sbrs	r11, 4
 8a6:	0a c0       	rjmp	.+20     	; 0x8bc <vfprintf+0x2b4>
 8a8:	b2 fc       	sbrc	r11, 2
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <vfprintf+0x2b4>
 8ac:	2b 2d       	mov	r18, r11
 8ae:	2e 7e       	andi	r18, 0xEE	; 238
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <vfprintf+0x2b4>
 8b2:	7a 2c       	mov	r7, r10
 8b4:	2b 2d       	mov	r18, r11
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <vfprintf+0x2b6>
 8b8:	7a 2c       	mov	r7, r10
 8ba:	01 c0       	rjmp	.+2      	; 0x8be <vfprintf+0x2b6>
 8bc:	75 2c       	mov	r7, r5
 8be:	24 ff       	sbrs	r18, 4
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <vfprintf+0x2d4>
 8c2:	fe 01       	movw	r30, r28
 8c4:	ea 0d       	add	r30, r10
 8c6:	f1 1d       	adc	r31, r1
 8c8:	80 81       	ld	r24, Z
 8ca:	80 33       	cpi	r24, 0x30	; 48
 8cc:	11 f4       	brne	.+4      	; 0x8d2 <vfprintf+0x2ca>
 8ce:	29 7e       	andi	r18, 0xE9	; 233
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <vfprintf+0x2dc>
 8d2:	22 ff       	sbrs	r18, 2
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0x2da>
 8d6:	73 94       	inc	r7
 8d8:	73 94       	inc	r7
 8da:	04 c0       	rjmp	.+8      	; 0x8e4 <vfprintf+0x2dc>
 8dc:	82 2f       	mov	r24, r18
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	09 f0       	breq	.+2      	; 0x8e4 <vfprintf+0x2dc>
 8e2:	73 94       	inc	r7
 8e4:	23 fd       	sbrc	r18, 3
 8e6:	13 c0       	rjmp	.+38     	; 0x90e <vfprintf+0x306>
 8e8:	20 ff       	sbrs	r18, 0
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <vfprintf+0x2f0>
 8ec:	5a 2c       	mov	r5, r10
 8ee:	73 14       	cp	r7, r3
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <vfprintf+0x2f0>
 8f2:	53 0c       	add	r5, r3
 8f4:	57 18       	sub	r5, r7
 8f6:	73 2c       	mov	r7, r3
 8f8:	73 14       	cp	r7, r3
 8fa:	68 f4       	brcc	.+26     	; 0x916 <vfprintf+0x30e>
 8fc:	b7 01       	movw	r22, r14
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	2c 87       	std	Y+12, r18	; 0x0c
 904:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 908:	73 94       	inc	r7
 90a:	2c 85       	ldd	r18, Y+12	; 0x0c
 90c:	f5 cf       	rjmp	.-22     	; 0x8f8 <vfprintf+0x2f0>
 90e:	73 14       	cp	r7, r3
 910:	10 f4       	brcc	.+4      	; 0x916 <vfprintf+0x30e>
 912:	37 18       	sub	r3, r7
 914:	01 c0       	rjmp	.+2      	; 0x918 <vfprintf+0x310>
 916:	31 2c       	mov	r3, r1
 918:	24 ff       	sbrs	r18, 4
 91a:	12 c0       	rjmp	.+36     	; 0x940 <vfprintf+0x338>
 91c:	b7 01       	movw	r22, r14
 91e:	80 e3       	ldi	r24, 0x30	; 48
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	2c 87       	std	Y+12, r18	; 0x0c
 924:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 928:	2c 85       	ldd	r18, Y+12	; 0x0c
 92a:	22 ff       	sbrs	r18, 2
 92c:	17 c0       	rjmp	.+46     	; 0x95c <vfprintf+0x354>
 92e:	21 ff       	sbrs	r18, 1
 930:	03 c0       	rjmp	.+6      	; 0x938 <vfprintf+0x330>
 932:	88 e5       	ldi	r24, 0x58	; 88
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <vfprintf+0x334>
 938:	88 e7       	ldi	r24, 0x78	; 120
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	b7 01       	movw	r22, r14
 93e:	0c c0       	rjmp	.+24     	; 0x958 <vfprintf+0x350>
 940:	82 2f       	mov	r24, r18
 942:	86 78       	andi	r24, 0x86	; 134
 944:	59 f0       	breq	.+22     	; 0x95c <vfprintf+0x354>
 946:	21 fd       	sbrc	r18, 1
 948:	02 c0       	rjmp	.+4      	; 0x94e <vfprintf+0x346>
 94a:	80 e2       	ldi	r24, 0x20	; 32
 94c:	01 c0       	rjmp	.+2      	; 0x950 <vfprintf+0x348>
 94e:	8b e2       	ldi	r24, 0x2B	; 43
 950:	27 fd       	sbrc	r18, 7
 952:	8d e2       	ldi	r24, 0x2D	; 45
 954:	b7 01       	movw	r22, r14
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 95c:	a5 14       	cp	r10, r5
 95e:	38 f4       	brcc	.+14     	; 0x96e <vfprintf+0x366>
 960:	b7 01       	movw	r22, r14
 962:	80 e3       	ldi	r24, 0x30	; 48
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 96a:	5a 94       	dec	r5
 96c:	f7 cf       	rjmp	.-18     	; 0x95c <vfprintf+0x354>
 96e:	aa 94       	dec	r10
 970:	f4 01       	movw	r30, r8
 972:	ea 0d       	add	r30, r10
 974:	f1 1d       	adc	r31, r1
 976:	80 81       	ld	r24, Z
 978:	b7 01       	movw	r22, r14
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 980:	a1 10       	cpse	r10, r1
 982:	f5 cf       	rjmp	.-22     	; 0x96e <vfprintf+0x366>
 984:	33 20       	and	r3, r3
 986:	09 f4       	brne	.+2      	; 0x98a <vfprintf+0x382>
 988:	51 ce       	rjmp	.-862    	; 0x62c <vfprintf+0x24>
 98a:	b7 01       	movw	r22, r14
 98c:	80 e2       	ldi	r24, 0x20	; 32
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fputc>
 994:	3a 94       	dec	r3
 996:	f6 cf       	rjmp	.-20     	; 0x984 <vfprintf+0x37c>
 998:	f7 01       	movw	r30, r14
 99a:	86 81       	ldd	r24, Z+6	; 0x06
 99c:	97 81       	ldd	r25, Z+7	; 0x07
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x39c>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	2c 96       	adiw	r28, 0x0c	; 12
 9a6:	e2 e1       	ldi	r30, 0x12	; 18
 9a8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__epilogue_restores__>

000009ac <strnlen_P>:
 9ac:	fc 01       	movw	r30, r24
 9ae:	05 90       	lpm	r0, Z+
 9b0:	61 50       	subi	r22, 0x01	; 1
 9b2:	70 40       	sbci	r23, 0x00	; 0
 9b4:	01 10       	cpse	r0, r1
 9b6:	d8 f7       	brcc	.-10     	; 0x9ae <strnlen_P+0x2>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	8e 0f       	add	r24, r30
 9be:	9f 1f       	adc	r25, r31
 9c0:	08 95       	ret

000009c2 <strnlen>:
 9c2:	fc 01       	movw	r30, r24
 9c4:	61 50       	subi	r22, 0x01	; 1
 9c6:	70 40       	sbci	r23, 0x00	; 0
 9c8:	01 90       	ld	r0, Z+
 9ca:	01 10       	cpse	r0, r1
 9cc:	d8 f7       	brcc	.-10     	; 0x9c4 <strnlen+0x2>
 9ce:	80 95       	com	r24
 9d0:	90 95       	com	r25
 9d2:	8e 0f       	add	r24, r30
 9d4:	9f 1f       	adc	r25, r31
 9d6:	08 95       	ret

000009d8 <fputc>:
 9d8:	0f 93       	push	r16
 9da:	1f 93       	push	r17
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	18 2f       	mov	r17, r24
 9e2:	09 2f       	mov	r16, r25
 9e4:	eb 01       	movw	r28, r22
 9e6:	8b 81       	ldd	r24, Y+3	; 0x03
 9e8:	81 fd       	sbrc	r24, 1
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <fputc+0x1a>
 9ec:	8f ef       	ldi	r24, 0xFF	; 255
 9ee:	9f ef       	ldi	r25, 0xFF	; 255
 9f0:	20 c0       	rjmp	.+64     	; 0xa32 <fputc+0x5a>
 9f2:	82 ff       	sbrs	r24, 2
 9f4:	10 c0       	rjmp	.+32     	; 0xa16 <fputc+0x3e>
 9f6:	4e 81       	ldd	r20, Y+6	; 0x06
 9f8:	5f 81       	ldd	r21, Y+7	; 0x07
 9fa:	2c 81       	ldd	r18, Y+4	; 0x04
 9fc:	3d 81       	ldd	r19, Y+5	; 0x05
 9fe:	42 17       	cp	r20, r18
 a00:	53 07       	cpc	r21, r19
 a02:	7c f4       	brge	.+30     	; 0xa22 <fputc+0x4a>
 a04:	e8 81       	ld	r30, Y
 a06:	f9 81       	ldd	r31, Y+1	; 0x01
 a08:	9f 01       	movw	r18, r30
 a0a:	2f 5f       	subi	r18, 0xFF	; 255
 a0c:	3f 4f       	sbci	r19, 0xFF	; 255
 a0e:	39 83       	std	Y+1, r19	; 0x01
 a10:	28 83       	st	Y, r18
 a12:	10 83       	st	Z, r17
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <fputc+0x4a>
 a16:	e8 85       	ldd	r30, Y+8	; 0x08
 a18:	f9 85       	ldd	r31, Y+9	; 0x09
 a1a:	81 2f       	mov	r24, r17
 a1c:	09 95       	icall
 a1e:	89 2b       	or	r24, r25
 a20:	29 f7       	brne	.-54     	; 0x9ec <fputc+0x14>
 a22:	2e 81       	ldd	r18, Y+6	; 0x06
 a24:	3f 81       	ldd	r19, Y+7	; 0x07
 a26:	2f 5f       	subi	r18, 0xFF	; 255
 a28:	3f 4f       	sbci	r19, 0xFF	; 255
 a2a:	3f 83       	std	Y+7, r19	; 0x07
 a2c:	2e 83       	std	Y+6, r18	; 0x06
 a2e:	81 2f       	mov	r24, r17
 a30:	90 2f       	mov	r25, r16
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	08 95       	ret

00000a3c <__ultoa_invert>:
 a3c:	fa 01       	movw	r30, r20
 a3e:	aa 27       	eor	r26, r26
 a40:	28 30       	cpi	r18, 0x08	; 8
 a42:	51 f1       	breq	.+84     	; 0xa98 <__ultoa_invert+0x5c>
 a44:	20 31       	cpi	r18, 0x10	; 16
 a46:	81 f1       	breq	.+96     	; 0xaa8 <__ultoa_invert+0x6c>
 a48:	e8 94       	clt
 a4a:	6f 93       	push	r22
 a4c:	6e 7f       	andi	r22, 0xFE	; 254
 a4e:	6e 5f       	subi	r22, 0xFE	; 254
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	af 4f       	sbci	r26, 0xFF	; 255
 a58:	b1 e0       	ldi	r27, 0x01	; 1
 a5a:	3e d0       	rcall	.+124    	; 0xad8 <__ultoa_invert+0x9c>
 a5c:	b4 e0       	ldi	r27, 0x04	; 4
 a5e:	3c d0       	rcall	.+120    	; 0xad8 <__ultoa_invert+0x9c>
 a60:	67 0f       	add	r22, r23
 a62:	78 1f       	adc	r23, r24
 a64:	89 1f       	adc	r24, r25
 a66:	9a 1f       	adc	r25, r26
 a68:	a1 1d       	adc	r26, r1
 a6a:	68 0f       	add	r22, r24
 a6c:	79 1f       	adc	r23, r25
 a6e:	8a 1f       	adc	r24, r26
 a70:	91 1d       	adc	r25, r1
 a72:	a1 1d       	adc	r26, r1
 a74:	6a 0f       	add	r22, r26
 a76:	71 1d       	adc	r23, r1
 a78:	81 1d       	adc	r24, r1
 a7a:	91 1d       	adc	r25, r1
 a7c:	a1 1d       	adc	r26, r1
 a7e:	20 d0       	rcall	.+64     	; 0xac0 <__ultoa_invert+0x84>
 a80:	09 f4       	brne	.+2      	; 0xa84 <__ultoa_invert+0x48>
 a82:	68 94       	set
 a84:	3f 91       	pop	r19
 a86:	2a e0       	ldi	r18, 0x0A	; 10
 a88:	26 9f       	mul	r18, r22
 a8a:	11 24       	eor	r1, r1
 a8c:	30 19       	sub	r19, r0
 a8e:	30 5d       	subi	r19, 0xD0	; 208
 a90:	31 93       	st	Z+, r19
 a92:	de f6       	brtc	.-74     	; 0xa4a <__ultoa_invert+0xe>
 a94:	cf 01       	movw	r24, r30
 a96:	08 95       	ret
 a98:	46 2f       	mov	r20, r22
 a9a:	47 70       	andi	r20, 0x07	; 7
 a9c:	40 5d       	subi	r20, 0xD0	; 208
 a9e:	41 93       	st	Z+, r20
 aa0:	b3 e0       	ldi	r27, 0x03	; 3
 aa2:	0f d0       	rcall	.+30     	; 0xac2 <__ultoa_invert+0x86>
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__ultoa_invert+0x5c>
 aa6:	f6 cf       	rjmp	.-20     	; 0xa94 <__ultoa_invert+0x58>
 aa8:	46 2f       	mov	r20, r22
 aaa:	4f 70       	andi	r20, 0x0F	; 15
 aac:	40 5d       	subi	r20, 0xD0	; 208
 aae:	4a 33       	cpi	r20, 0x3A	; 58
 ab0:	18 f0       	brcs	.+6      	; 0xab8 <__ultoa_invert+0x7c>
 ab2:	49 5d       	subi	r20, 0xD9	; 217
 ab4:	31 fd       	sbrc	r19, 1
 ab6:	40 52       	subi	r20, 0x20	; 32
 ab8:	41 93       	st	Z+, r20
 aba:	02 d0       	rcall	.+4      	; 0xac0 <__ultoa_invert+0x84>
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__ultoa_invert+0x6c>
 abe:	ea cf       	rjmp	.-44     	; 0xa94 <__ultoa_invert+0x58>
 ac0:	b4 e0       	ldi	r27, 0x04	; 4
 ac2:	a6 95       	lsr	r26
 ac4:	97 95       	ror	r25
 ac6:	87 95       	ror	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0x86>
 ad0:	00 97       	sbiw	r24, 0x00	; 0
 ad2:	61 05       	cpc	r22, r1
 ad4:	71 05       	cpc	r23, r1
 ad6:	08 95       	ret
 ad8:	9b 01       	movw	r18, r22
 ada:	ac 01       	movw	r20, r24
 adc:	0a 2e       	mov	r0, r26
 ade:	06 94       	lsr	r0
 ae0:	57 95       	ror	r21
 ae2:	47 95       	ror	r20
 ae4:	37 95       	ror	r19
 ae6:	27 95       	ror	r18
 ae8:	ba 95       	dec	r27
 aea:	c9 f7       	brne	.-14     	; 0xade <__ultoa_invert+0xa2>
 aec:	62 0f       	add	r22, r18
 aee:	73 1f       	adc	r23, r19
 af0:	84 1f       	adc	r24, r20
 af2:	95 1f       	adc	r25, r21
 af4:	a0 1d       	adc	r26, r0
 af6:	08 95       	ret

00000af8 <__prologue_saves__>:
 af8:	2f 92       	push	r2
 afa:	3f 92       	push	r3
 afc:	4f 92       	push	r4
 afe:	5f 92       	push	r5
 b00:	6f 92       	push	r6
 b02:	7f 92       	push	r7
 b04:	8f 92       	push	r8
 b06:	9f 92       	push	r9
 b08:	af 92       	push	r10
 b0a:	bf 92       	push	r11
 b0c:	cf 92       	push	r12
 b0e:	df 92       	push	r13
 b10:	ef 92       	push	r14
 b12:	ff 92       	push	r15
 b14:	0f 93       	push	r16
 b16:	1f 93       	push	r17
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	cd b7       	in	r28, 0x3d	; 61
 b1e:	de b7       	in	r29, 0x3e	; 62
 b20:	ca 1b       	sub	r28, r26
 b22:	db 0b       	sbc	r29, r27
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	09 94       	ijmp

00000b30 <__epilogue_restores__>:
 b30:	2a 88       	ldd	r2, Y+18	; 0x12
 b32:	39 88       	ldd	r3, Y+17	; 0x11
 b34:	48 88       	ldd	r4, Y+16	; 0x10
 b36:	5f 84       	ldd	r5, Y+15	; 0x0f
 b38:	6e 84       	ldd	r6, Y+14	; 0x0e
 b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b40:	aa 84       	ldd	r10, Y+10	; 0x0a
 b42:	b9 84       	ldd	r11, Y+9	; 0x09
 b44:	c8 84       	ldd	r12, Y+8	; 0x08
 b46:	df 80       	ldd	r13, Y+7	; 0x07
 b48:	ee 80       	ldd	r14, Y+6	; 0x06
 b4a:	fd 80       	ldd	r15, Y+5	; 0x05
 b4c:	0c 81       	ldd	r16, Y+4	; 0x04
 b4e:	1b 81       	ldd	r17, Y+3	; 0x03
 b50:	aa 81       	ldd	r26, Y+2	; 0x02
 b52:	b9 81       	ldd	r27, Y+1	; 0x01
 b54:	ce 0f       	add	r28, r30
 b56:	d1 1d       	adc	r29, r1
 b58:	0f b6       	in	r0, 0x3f	; 63
 b5a:	f8 94       	cli
 b5c:	de bf       	out	0x3e, r29	; 62
 b5e:	0f be       	out	0x3f, r0	; 63
 b60:	cd bf       	out	0x3d, r28	; 61
 b62:	ed 01       	movw	r28, r26
 b64:	08 95       	ret

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
